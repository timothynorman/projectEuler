/*
 * Project Euler: Question 12
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * What is the value of the first triangle number to have over five hundred divisors?
 */

package ca.timnorman.projectEuler;

import java.util.HashSet;

public class Question12 {

	public static void main(String[] args) {
		
		final int MAX_DIVISORS = 500;
		long triangleNumber = 0;
		long iteration = 1;
		boolean doContinue = true;
		
		do {
			triangleNumber += iteration;
			if(isGreatEnough(findFactors(triangleNumber), MAX_DIVISORS)) {
				doContinue = false;
			}
			iteration++;
		} while (doContinue);
		System.out.println(triangleNumber);
	}
	
	/**
	 * Method to determine if the set of factors is large enough. 
	 * @param factors A hash set of unique factors for a number.
	 * @param max The maximum number of factors. 
	 * @return True if set of factors is equal to or greater than max, and false otherwise. 
	 */
	private static boolean isGreatEnough(HashSet<Long> factors, int max) {
		if(factors.size() >= max) {
			return true;
		}
		return false;
	}
	
	/**
	 * Method to find all unique factors of a number. Using 
	 * 'HashSet' to automatically filter out any repeated factors. 
	 * @param number The number to find the factors of. 
	 * @return A HashSet of unique, natural factors. 
	 */
	private static HashSet<Long> findFactors(long number) {
		HashSet<Long> factors = new HashSet<>();
		for(long i = 1; i < Math.sqrt(number); i++) {
			if(number % i == 0) {
				factors.add(i);
				factors.add(number / i);
			}
		}
		System.out.printf("%,d: %d%n", number, factors.size());	// Used for debugging. Shows the current Triangle Number and its number of factors. 
		return factors;
	}
}
